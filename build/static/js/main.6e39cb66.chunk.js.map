{"version":3,"sources":["components/Home.js","components/CandidatureForm.js","components/SpaceCandidat.js","components/SpaceAdmin.js","components/CustomNavbar.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","Image","src","className","Component","CandidatureForm","SpaceCandidat","Link","to","Button","color","components_CandidatureForm","React","SpaceAdmin","CustomNavbar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","state","isOpen","setState","Navbar","dark","expand","fixed","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","id","eventKey","href","componentClass","App","BrowserRouter","CustomNavbar_CustomNavbar","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uNAIqBA,0LAEjB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,IAAI,oBAAoBC,UAAU,iBAD3C,iDAH4BC,cCQnBC,mLAPP,OACIP,EAAAC,EAAAC,cAAA,wDAJkBI,+BCsBfE,mLAhBP,OACIR,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,qCACAF,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAMC,GAAG,SACLV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAQC,MAAM,aAAd,mBAEJZ,EAAAC,EAAAC,cAACS,EAAA,EAAD,MACAX,EAAAC,EAAAC,cAAA,gJAGAF,EAAAC,EAAAC,cAACW,EAAD,cAbYC,IAAMR,WCanBS,mLAZP,OACIf,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,8JAGAF,EAAAC,EAAAC,cAACS,EAAA,EAAD,0DATSG,IAAMR,yECEVU,qBACjB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,OAASP,EAAKO,OAAOC,KAAZP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACdA,EAAKU,MAAQ,CACXC,QAAQ,GALKX,wEASfG,KAAKS,SAAS,CACZD,QAASR,KAAKO,MAAMC,0CAItB,OACE7B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAQC,MAAI,EAACC,OAAO,KAAKC,MAAM,OAC7BlC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAeC,QAASf,KAAKI,SAC7BzB,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAUR,OAAQR,KAAKO,MAAMC,OAAQS,QAAM,GACzCtC,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAKlC,UAAU,UAAUiC,QAAM,GAC7BtC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,KACExC,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAASC,GAAG,OAAOC,SAAU,EAAGC,KAAK,IAAIC,eAAgBpC,IAAMC,GAAG,KAAlE,mBAEFV,EAAAC,EAAAC,cAACsC,EAAA,EAAD,KACExC,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAASC,GAAG,OAAOC,SAAU,EAAGC,KAAK,cAAcC,eAAgBpC,IAAMC,GAAG,KAA5E,iBAEFV,EAAAC,EAAAC,cAACsC,EAAA,EAAD,KACExC,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAASC,GAAG,OAAOC,SAAU,EAAGC,KAAK,iBAAgBC,eAAgBpC,IAAMC,GAAG,KAA9E,+BA5BsBJ,cCiB3BwC,mLAZX,OACE9C,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,KACE/C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC8C,EAAD,MACAhD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWrD,IACjCC,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAOE,KAAK,cAAcC,UAAWrC,IACrCf,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAOE,KAAK,iBAAiBC,UAAW5C,aARhCF,aCIE+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6e39cb66.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Image } from 'react-bootstrap';\r\nimport './Home.css'\r\n\r\nexport default class Home extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Image src=\"pictures/home.jpg\" className=\"header-image\"></Image>\r\n        Photo by Janko Ferlič on Unsplash\r\n      </div>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\n\r\nclass CandidatureForm extends Component {\r\n    \r\n    render() {\r\n        return( \r\n            <div>\r\n                faire le formulaire de candidature\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default CandidatureForm;","import CandidatureForm from './CandidatureForm';\r\nimport React from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass SpaceCandidat extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h2>Espace Candidat BITCH !</h2>\r\n                <Link to=\"/home\">\r\n                    <Button color=\"secondary\">Déconnexion</Button>\r\n                </Link>\r\n                <Button></Button>\r\n                <div>Faire une navbar pour le bouton déconnexion et un bouton single page qui\r\n                    affichera le formulaire de création de candidature\r\n                </div>\r\n                <CandidatureForm></CandidatureForm>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SpaceCandidat;","import React from 'react';\r\nimport { Button } from 'reactstrap';\r\n\r\nclass SpaceAdmin extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h2>Espace ADMIN bitch !</h2>\r\n                <div>Utiliser la navbar de l'espace candidat pour se déconnecter\r\n                    et créer le bouton single page pour afficher les candidatures non traitées\r\n                </div>\r\n                <Button>afficher les candidatures non traitées</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SpaceAdmin;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Navbar, Nav, NavItem, NavLink, Collapse, NavbarToggler } from 'reactstrap';\r\nimport './CustomNavbar.css';\r\n\r\nexport default class CustomNavbar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.toggle = this.toggle.bind(this);\r\n        this.state = {\r\n          isOpen: false\r\n        };\r\n      }\r\n      toggle() {\r\n        this.setState({\r\n          isOpen: !this.state.isOpen\r\n        });\r\n      }\r\n      render() {\r\n        return (\r\n          <div>\r\n            <Navbar dark expand=\"md\" fixed=\"top\">\r\n              <NavbarToggler onClick={this.toggle} />\r\n              <Collapse isOpen={this.state.isOpen} navbar>\r\n                <Nav className=\"ml-auto\" navbar>\r\n                  <NavItem>\r\n                    <NavLink id=\"link\" eventKey={1} href=\"/\" componentClass={Link} to=\"/\">Page d'accueil</NavLink>\r\n                  </NavItem>\r\n                  <NavItem>\r\n                    <NavLink id=\"link\" eventKey={2} href=\"/SpaceAdmin\" componentClass={Link} to=\"/\">Espace admin</NavLink>\r\n                  </NavItem>\r\n                  <NavItem>\r\n                    <NavLink id=\"link\" eventKey={3} href=\"/SpaceCandidat\"componentClass={Link} to=\"/\">Espace candidat</NavLink>\r\n                  </NavItem>\r\n                </Nav>\r\n              </Collapse>\r\n            </Navbar>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Home from './components/Home';\nimport SpaceCandidat from './components/SpaceCandidat';\nimport SpaceAdmin from './components/SpaceAdmin';\nimport CustomNavbar from './components/CustomNavbar';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <CustomNavbar></CustomNavbar>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/spaceAdmin\" component={SpaceAdmin} />\n          <Route path=\"/spaceCandidat\" component={SpaceCandidat} />\n        </div>\n      </Router>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}